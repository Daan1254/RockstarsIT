@model RockstarsIT.Models.CreateEditSquadViewModel

@{
    ViewData["Title"] = "Edit";
}

<link rel="stylesheet" href="~/css/Squads.css/Index.css" />



<div class="edit-container">
    <div class="inner-container">
        <h4>Bewerk @Model.Name</h4>

        <hr />
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="text-danger">@TempData["ErrorMessage"]</div>
            }
            <div class="form-group">
                <label asp-for="Name" class="control-label">Naam</label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Beschrijving</label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Rockstars</label>
                <div style="display: flex;flex-direction: row; gap: 10px;">
                    <input id="emailInput" type="email" class="form-control" style="width: 85%" placeholder="Email">
                    <button type="button" onclick="addEmail()" style="width: 15%"
                        class="button button-primary">Add</button>
                </div>
                <span id="emailError" class="text-danger"></span>
            </div>

            <div class="form-group" id="emailList">
                <!-- Email list will be populated here -->
            </div>

            <input type="hidden" id="emailsJson" name="Emails" value="[]" />
            <div class="form-group">
                <input type="hidden" asp-for="Id" value="@Model.Id" />
                <input type="submit" value="Opslaan" class="button button-primary button-full" />
            </div>
        </form>
        <br />
        <h5>Bedrijven</h5>
        <br />
        <div style="display: flex; flex-direction: row; gap: 15px">
            @foreach (var item in Model.Companies)
            {
                if (item.Id == Model.Company?.Id)
                {
                    <form asp-controller="Squad" asp-action="DisconnectCompany" asp-route-companyId="@item.Id"
                        asp-route-squadId="@Model.Id" method="post">
                        <p>@item.Name</p>
                        <button type="submit" class="button button-secondary">Ontkoppel</button>
                    </form>
                }
                else
                {
                    <form asp-controller="Squad" asp-action="LinkCompany" asp-route-companyId="@item.Id"
                        asp-route-squadId="@Model.Id" method="post">
                        <p>@item.Name</p>
                        <button type="submit" class="button button-secondary">Linken</button>

                    </form>
                }
            }
        </div>
        <br />
        <a asp-action="Index">Terug</a>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script>
    let emails = [];

    window.onload = function () {
            @foreach (var user in @Model.Users)
        {
            @:emails.push('@user.Email');
        }
                updateEmailList();
        };

        function addEmail() {
            const emailInput = document.getElementById('emailInput');
            const emailError = document.getElementById('emailError');
            const email = emailInput.value.trim();

            // Basic email validation

            // Check for duplicates
            if (emails.includes(email)) {
                emailError.textContent = 'This email is already added';
                return;
            }

            emails.push(email);
            updateEmailList();

            // Clear input and error
            emailInput.value = '';
            emailError.textContent = '';
        }

        function removeEmail(email) {
            emails = emails.filter(e => e !== email);
            updateEmailList();
        }

        function updateEmailList() {
            const emailList = document.getElementById('emailList');
            const emailsJson = document.getElementById('emailsJson');

            emailList.innerHTML = emails.map(email => `
                            <div style="display: flex;flex-direction: row; gap: 10px; margin-bottom: 10px;">
                                <input readonly style="width: 85%" value="${email}" class="form-control">
                                <button type="button" onclick="removeEmail('${email}')" style="width: 15%" class="button button-secondary">Remove</button>
                            </div>
                        `).join('');

            // Update hidden input with JSON string of emails
            emailsJson.value = JSON.stringify(emails);
        }
    </script>
}
